#!/usr/bin/python3
#	storage-server - Integrated remote backup solution
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of storage-server.
#
#	storage-server is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	storage-server is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with storage-server; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import os
import re
import subprocess

files = set([
	"/dev/null",
	"/etc/group",
	"/etc/hosts",
	"/etc/ld.so.cache",
	"/etc/ld.so.conf",
	"/etc/nsswitch.conf",
	"/etc/passwd",
	"/etc/resolv.conf",
])
executables = [
#	"/bin/bash",		# Testing only
	"/usr/bin/rssh",
	"/usr/bin/rsync",
	"/usr/bin/scp",
	"/usr/lib/openssh/sftp-server",
]
outdir = sys.argv[1]
if not os.path.isdir(outdir):
	print("Not a directory: %s" % (outdir))
	sys.exit(1)

def add_recursively(filelist, filename):
	filelist.add(filename)
	if os.path.islink(filename):		
		target = os.readlink(filename)
		if target.startswith("/"):
			# Absolute link
			add_recursively(filelist, target)
		else:
			# Relative link
			abs_target = os.path.dirname(filename) +"/" + target
			add_recursively(filelist, abs_target)

files |= set(executables)
ldd_re = re.compile(r"^\s*(?P<base>\S+)(\s+=>\s+(?P<target>\S+))?", flags = re.MULTILINE)
for executable in executables:
	ldd = subprocess.check_output([ "ldd", executable ])
	ldd = ldd.decode()
	for match in ldd_re.finditer(ldd):
		match = match.groupdict()
		if match["target"] is not None:
			add_recursively(files, match["target"])
		elif match["base"].startswith("/"):
			add_recursively(files, match["base"])

files = list(sorted(files))
cmd = [ "rsync", "-aR" ] + files + [ outdir ]
#print(cmd)
subprocess.check_call(cmd)
